name: Build

on:
    push:
    pull_request:

jobs:
    build:
        name: Build on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-latest ]

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4

            -   name: Set up dependencies (Linux)
                if: runner.os == 'Linux'
                run: |
                    sudo apt update
                    sudo apt install -y wget software-properties-common libarchive-dev
                    wget https://apt.llvm.org/llvm.sh
                    chmod +x llvm.sh
                    sudo ./llvm.sh 19
                    sudo apt install -y cmake ninja-build clang-19 clang-tools-19 libgl1-mesa-dev libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
                    sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-19 100
                    sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-19 100

            -   name: Set up dependencies (macOS)
                if: runner.os == 'macOS'
                run: |
                    brew install cmake ninja llvm libarchive
                    echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH

            -   name: Install macOS CommandLineTools
                if: runner.os == 'macOS'
                run: |
                    sudo xcode-select --install || true

            -   name: Set up MSYS2 with MinGW and Ninja (Windows)
                if: runner.os == 'Windows'
                uses: msys2/setup-msys2@v2
                with:
                    msystem: MINGW64
                    update: true
                    install: >-
                        mingw-w64-x86_64-toolchain
                        mingw-w64-x86_64-cmake
                        mingw-w64-x86_64-ninja
                        mingw-w64-x86_64-libarchive

            -   name: Configure (Linux/macOS)
                if: runner.os != 'Windows'
                run: |
                    if [ "${{ runner.os }}" = "macOS" ]; then
                        export CC=/opt/homebrew/opt/llvm/bin/clang
                        export CXX=/opt/homebrew/opt/llvm/bin/clang++
                        export CMAKE_PREFIX_PATH=/opt/homebrew/opt/libarchive
                        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_SYSROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
                    else
                        export CC=clang-19
                        export CXX=clang++-19
                        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
                    fi

            -   name: Build (Linux/macOS)
                if: runner.os != 'Windows'
                run: |
                    cmake --build build --config Release

            -   name: Upload binary (Linux/macOS)
                if: runner.os != 'Windows'
                uses: actions/upload-artifact@v4
                with:
                    name: konduit_installer-${{ runner.os }}
                    path: build/konduit_installer

            -   name: Configure (Windows with MinGW + Ninja)
                if: runner.os == 'Windows'
                shell: msys2 {0}
                run: |
                    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

            -   name: Build (Windows with MinGW + Ninja)
                if: runner.os == 'Windows'
                shell: msys2 {0}
                run: |
                    cmake --build build --config Release

            -   name: Upload binary (Windows)
                if: runner.os == 'Windows'
                uses: actions/upload-artifact@v4
                with:
                    name: konduit_installer-${{ runner.os }}
                    path: build/konduit_installer.exe
